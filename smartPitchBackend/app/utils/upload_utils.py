import fitz  # PyMuPDF
from sentence_transformers import SentenceTransformer
import numpy as np
import os
import shutil
from sqlalchemy.orm import Session
from app.models import Resume, VectorMeta, User
import datetime
import uuid
from fastapi import UploadFile

# Loading the sentence transformer model once
model = SentenceTransformer('all-mpnet-base-v2')

RESUME_VECTORS_DIR = r"D:\SmartPitch\smartPitchBackend\resume_vectors"

RESUME_UPLOAD_DIR = r"D:\SmartPitch\smartPitchBackend\resume_uploads"

def save_resume_file(user_identifier: str, file: UploadFile) -> str:
    """
    Saves the uploaded PDF file to the resume_uploads folder with the user_identifier as filename.
    Overwrites existing file if present.
    
    Returns the full saved file path.
    """
    os.makedirs(RESUME_UPLOAD_DIR, exist_ok=True)
    file_location = os.path.join(RESUME_UPLOAD_DIR, f"{user_identifier}.pdf")
    
    with open(file_location, "wb") as buffer:
        shutil.copyfileobj(file.file, buffer)
    
    return file_location


def extract_text_from_pdf(pdf_path: str) -> str:
    """
    Extracts all text from a PDF file given by pdf_path using PyMuPDF.
    """
    doc = fitz.open(pdf_path)
    text = ""
    for page in doc:
        text += page.get_text()
    return text

def generate_embedding(text: str) -> np.ndarray:
    """
    Generates a vector embedding for given text using sentence-transformers model.
    """
    embedding = model.encode(text)
    return embedding

def save_embedding(user_identifier: str, embedding: np.ndarray):
    """
    Saves embedding vector as a numpy binary file in the resume_vectors folder.
    Overwrites if already exists.
    """
    os.makedirs(RESUME_VECTORS_DIR, exist_ok=True)
    embedding_path = os.path.join(RESUME_VECTORS_DIR, f"{user_identifier}.npy")
    np.save(embedding_path, embedding)


def update_resume_record(db: Session, user_email: str, filename: str) -> Resume:
    """
    Adds or updates a resume record for the given user email.
    Only one resume per user is allowed.

    Returns the Resume object.
    """
    # Get the user by email
    user = db.query(User).filter(User.email == user_email).first()
    if not user:
        raise ValueError("User not found")

    # Check if resume record exists for user
    resume = db.query(Resume).filter(Resume.user_id == user.user_id).first()
    if resume:
        # Update filename and uploaded timestamp
        resume.filename = filename
        resume.uploaded_at = datetime.datetime.utcnow()
    else:
        # Create new resume record
        resume = Resume(
            user_id=user.user_id,
            filename=filename,
            uploaded_at=datetime.datetime.utcnow()
        )
        db.add(resume)

    db.commit()
    db.refresh(resume)
    return resume


def update_vector_meta_record(db: Session, user_email: str, resume_id: int, faiss_vector_id: str = None) -> VectorMeta:
    """
    Adds a new vector_meta record for the user and resume.

    The faiss_vector_id should be a unique identifier, autogenerated if not provided.

    Returns the VectorMeta object.
    """
    user = db.query(User).filter(User.email == user_email).first()
    if not user:
        raise ValueError("User not found")

    if not faiss_vector_id:
        faiss_vector_id = str(uuid.uuid4())

    vector_meta = VectorMeta(
        user_id=user.user_id,
        resume_id=resume_id,
        faiss_vector_id=faiss_vector_id,
        created_at=datetime.datetime.utcnow()
    )
    db.add(vector_meta)
    db.commit()
    db.refresh(vector_meta)
    return vector_meta